Java project for "Advanced Data Structures in Java", course #3 in 
"Java Programming: Object-Oriented Design of Data Structures" from 
University of California, San Diego (on Coursera).
==================================================================
Starter Code and GUI Application were provided. 
The files provided are skeleton code, as well as grading previews and 
testing files to be used in completing the course programming 
assignments. Additionally, I was provided a runnable JavaFX program 
which helped to test and demonstrate my implementations.

I developed only "back-end" code.
In MapGraph.java, a //TODO indicates the methods I implemented.
As one of the assignments was about class design, I designed and implemented
the Node class and the Edge class, in the roadgraph package. 

The project for this course was to build a mapping application with 
the ability to provide and visualize routes from one point to another 
in a map. 
Each week I added a bit more functionality to my mapping application.

Last week assignment consisted of a project extension.
I added two more algorithms to find a path from a start node to an end 
node: DijkstraWithTime and A*WithTime. 
They work in the same way as Dijkstra and A*, but instead of distances 
they take into account the time it takes to go through a path, based on 
the type of roads. 
If an edge is of type "motorway" or "motorway-link" they compute the time 
using a speed of 120 km/h, otherwise 60 km/h. 
This is implemented with the help of a new method in the MapGraph class, 
called getTime(Node startNode, Node endNode), that returns the time based 
on the type of edge connecting the two given nodes.
When computing the time from a node to the goal node, the default speed that is used is 120 km/h as the predicted time must be an optimistic estimation. This is done by a new method I added to the Node class, called getTimeTo(Node goalNode).
I also updated the toggle menu in the GUI.


-------------------------------------------------------[ FILES BY WEEK ]--

Below are the files introduced in each week and used in each week
of the course. See file for description...

Week 1 : Introduction to the course and graphs
==============================================
basicgraph.Graph.java
basicgraph.GraphAdjList.java
basicgraph.GraphAdjMatrix.java

Week 2 : Class design and simple graph search
==================================================
roadgraph.MapGraph.java
week2example.Maze.java
week2example.MazeLoader.java
week2example.MazeNode.java

Utility files
=============
geography.GeographicPoint.java
geography.RoadSegment.java
util.GraphLoader.java

---------------------------------------------------------------[ SETUP ]-- 

Importing Project into eclipse:
	1. Create a new Java Project in your workspace
	2. Import the starter files:
	  File -> Import -> Select "File System" -> Next -> Browse and set 
	  root directory to folder contents of zip were extracted to -> Finish

Feel free to use another IDE or manually compile and run your programs.
If you need help, google is your friend.
